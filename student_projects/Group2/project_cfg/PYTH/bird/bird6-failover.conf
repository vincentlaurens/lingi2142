

router id 255.0.0.2; # Sets the router unique ID

filter import_ospf_filter { # Filter used to determine which routes can be imported via OSPF
    
    if net = ::/0 then accept; # Accept the default gateway
    

    if net ~ fd00:200:2::/48 then accept; # Accept routes to the internal subnets
    if net ~ fd00:300:2::/48 then accept; # Idem
else reject; # Rejects all other routes
}

filter export_ospf_filter { # Filter used to determine which routes can be exported via OSPF
     
    if proto = "static_bpg" then reject; # Don't export the two unreachables /48 internal prefixes over OSPF, they're only for BGP
    
        

    if net = fd00:200:2::/48 then reject; # Don't export the two unreachables /48 internal prefixes over OSPF, they're only for BGP
    if net = fd00:300:2::/48 then reject; # Don't export the two unreachables /48 internal prefixes over OSPF, they're only for BGP
    
    
    if net ~ fd00:200:2::/48 then accept; # Accept internal subnets
    if net ~ fd00:300:2::/48 then accept; # Accept internal subnets
else reject; # Rejects all other routes
}


protocol kernel { # "Protocol" used to communicate routes with the kernel
 	learn; # Enable learning of routes added to the kernel routing tables by other routing daemons or by the system administrator.
    kernel table 254; # Insert rules into the main routing table (BGP routers have two tables, one default and one for multihoming)
	scan time 20; # Time in seconds between two consecutive scans of the kernel routing table.
    import all; # Import all routes
	export all; # Export all routes
}

protocol device { #Needed for general bird working, discovers interfaces and so on
	scan time 10; # Time in seconds between two consecutive scans of the kernel routing table.
	
}


protocol static static_bgp {  # Protocol used to declare the two /48 prefixes statically
        import all; # Useless since this protocol doesn't communicate with the kernel

        route fd00:200:2::/48 reject; # Declare and sets the two internal /48 prefixes
        route fd00:300:2::/48 reject; # They are marked as rejected because they are only used for external routing (advertised via BGP)
        # /64 prefixes are used for internal routing
}

protocol bgp eBGP { # BGP protocol
    local as 2; # Use our private AS number
    neighbor fd00:200::b as 200; # Defining our neighbor
    source address fd00:200::2;   # Use a non-standard source address
    direct; # BGP peers are directly connected, multihop, next hop, ... options are thus not needed

    # The interface option is not specified because it is determined by the "source" option and the static routing configuration
    # There's no authentication, thus no "password" or "setkey" options

    # All connect, hold, retry delays have been checked and their default values are OK for our setup

    passive off; # Needed to initiate a BGP connection
    default bgp_local_pref 100; # No sense here because we have only one BGP direct peer

	import where net = ::/0; #Only import default route
	export where proto = "static_bgp"; #Only export principal prefixes.
}



protocol ospf MyOSPF {
   tick 1; # perform LSP calculations each second
   rfc1583compat no; # no RFC 1583 compatibility for routing tables calculations
   import filter import_ospf_filter; # select import filter
   export filter export_ospf_filter; # select export filter
   area 0 { # Define a unique area (all routers belong to the same area 0)
      stub no; # this is a real area, not a stub one

      
	  stubnet fd00:200:2:0102::/64; # defines the LANs of the router (stubnet because there are no OSPF nodes in them)
	  
	  stubnet fd00:200:2:2102::/64; # defines the LANs of the router (stubnet because there are no OSPF nodes in them)
	  
	  stubnet fd00:200:2:3102::/64; # defines the LANs of the router (stubnet because there are no OSPF nodes in them)
	  

	  
      interface "PYTH-eth0" { # new ospf neighbor
          hello 10; # time interval in seconds between hello messages 
          retransmit 6; # time interval in seconds between retransmit message 
          cost 10; # costs of the neighbor, all links have a cost of 10
          transmit delay 5; # transmit delay between routers
          dead count 5; # When the router does not receive any messages from a neighbor in dead count*hello seconds, it will consider the neighbor down.
          wait 30; # After start, router waits for the specified number of seconds between starting election and building adjacency.
          type pointopoint; # Point-to-point networks connect just 2 routers together.
          authentication none; # No authentication of any kind
      };
	
      interface "PYTH-eth1" { # new ospf neighbor
          hello 10; # time interval in seconds between hello messages 
          retransmit 6; # time interval in seconds between retransmit message 
          cost 10; # costs of the neighbor, all links have a cost of 10
          transmit delay 5; # transmit delay between routers
          dead count 5; # When the router does not receive any messages from a neighbor in dead count*hello seconds, it will consider the neighbor down.
          wait 30; # After start, router waits for the specified number of seconds between starting election and building adjacency.
          type pointopoint; # Point-to-point networks connect just 2 routers together.
          authentication none; # No authentication of any kind
      };
	
      interface "PYTH-eth2" { # new ospf neighbor
          hello 10; # time interval in seconds between hello messages 
          retransmit 6; # time interval in seconds between retransmit message 
          cost 10; # costs of the neighbor, all links have a cost of 10
          transmit delay 5; # transmit delay between routers
          dead count 5; # When the router does not receive any messages from a neighbor in dead count*hello seconds, it will consider the neighbor down.
          wait 30; # After start, router waits for the specified number of seconds between starting election and building adjacency.
          type pointopoint; # Point-to-point networks connect just 2 routers together.
          authentication none; # No authentication of any kind
      };
	
   };
}


